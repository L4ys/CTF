0x8000: jmpl 0x0720

sys_open {
	0x8003: push r2
	0x8007: .byte 0x00
	0x8008: nop
	0x8009: pushl #0100
	0x800e: movb r0, #0x02
	0x8012: syscall
	0x8013: pop r2
	0x8015: ret
}
sys_lseek {
	0x8016: push r3
	0x801a: .byte 0x00
	0x801b: pop r2
	0x801d: mov r2, r1
	0x8021: mov r1, r0
	0x8025: movb r0, #0x11
	0x8029: syscall
	0x802a: pop r3
	0x802c: ret
}
sys_read {
	0x802d: push r3
	0x8031: .byte 0x00
	0x8032: pop r2
	0x8034: mov r2, r1
	0x8038: mov r1, r0
	0x803c: movb r0, #0x03
	0x8040: syscall
	0x8041: pop r3
	0x8043: ret
}
sys_write {
    0x8044: push r3
    0x8047: mov r3, r2
    0x804b: mov r2, r1
    0x804f: mov r1, r0
    0x8053: movb r0, #0x04
    0x8057: syscall
    0x8058: pop r3
    0x805a: ret
}
sys_close {
    0x805b: push r1
    0x805f: .byte 0x00
    0x8060: (push error flag)
    0x8064: .byte 0x00
    0x8065: .byte 0x05
    0x8066: syscall
    0x8067: pop r1
    0x8069: ret
}
strlen {
    0x806a: push r1
    0x806e: pop r2
    0x8070: movl r1, #0x0000
    0x8075: movl r2, #0x0000
L:
    0x807a: mov r1, [r0]
    0x807e: test r1, r1
    0x8081: inc r2
    0x8083: inc r0
    0x8085: jnz 0xfff2 # L

    0x8088: dec r2
    0x808a: mov r0, r2
    0x808e: pop r2
    0x8090: pop r1
    0x8092: ret
}
print {
    0x8093: push r0
    0x8097: pop r1
    0x8099: push r2
    0x809c: mov r1, r0
    0x80a0: call 0xffc6 # strlen
    0x80a4: mov r2, r0
    0x80a8: movb r0, #0x01
    0x80ac: call 0xff94 # sys_write
    0x80b0: pop r2
    0x80b2: pop r1
    0x80b4: pop r0
    0x80b6: ret
}
read {
    0x80b7: push r2
    0x80bb: pop r3
    0x80bd: mov r3, r1
    0x80c1: mov r2, r0
    0x80c5: movb r1, #0x00
    0x80c9: movb r0, #0x03
    0x80cd: syscall
    0x80ce: pop r3
    0x80d0: pop r2
    0x80d2: ret
}
fail {
	# print("Code does not...")
	0x80d3: movl r0, #0x8778
	0x80d8: call 0xffb7 # print 
	0x80dc: ret
}
success {
	# print("Thank you...")
	0x80dd: movl r0, #0x87a8
	0x80e2: call 0xffad (0x8093) # print

    # open("flag")
	0x80e6: movb r1, #0x00
	0x80ea: movl r0, #0x87d9
	0x80ef: call 0xff10 (0x8003) # open

	0x80f3: cmpl r0, #ffff
	0x80f8: jz 0x006e (0x8169)

	0x80fb: mov r3, r0
	0x80ff: movl r2, #0x0002
	0x8104: movl r1, #0x0000
	0x8109: call 0xff09 (0x8016) # lseek
	0x810d: mov r6, r3
	0x8111: mov r4, r0
	0x8115: inc r4
	0x8117: sub r8, r4
	0x811b: mov r5, r8
	0x811f: movl r2, #0x0000
	0x8124: movl r1, #0x0000
	0x8129: mov r0, r3
	0x812d: call 0xfee5 (0x8016) # lseek

	0x8131: mov r2, r4
	0x8135: mov r1, r5
	0x8139: mov r0, r3
	0x813d: call 0xfeec (0x802d) # read

	0x8141: cmpl r0, #ffff
	0x8146: jz 0x0020 (0x8169)

	0x8149: mov r3, r4
	0x814d: add r4, r5
	0x8151: dec r4
	0x8153: mov [r4], #0x00

	0x8157: mov r0, r5
	0x815b: call 0xff34 (0x8093) # print

	0x815f: mov r0, r6
	0x8163: call 0xfef4 (0x805b)
	0x8167: jmps 0x04 (0x816d)

	# newline()
	0x8169: call 0x05e0 (0x874d)

	0x816d: add r8, r3
	0x8171: ret
}
htoi {
	0x8172: push r1
    0x8175: mov r1, [r0]
	0x8179: cmpb r1, #0x30
	0x817d: jb 0x0025   # 0x81a5
	0x8180: cmpb r1, #0x39
	0x8184: ja 0x0006   # 0x818d

	0x8187: subb r1, #30
	0x818b: jmps 0x1c   # 0x81a9

	0x818d: cmpb r1, #46 (F)

	0x8191: ja 0x0011
	0x8194: cmpb r1, #40
	0x8198: jz 0x000a (0xffff81a5)
	0x819b: subb r1, #41
	0x819f: addb r1, #0a
	0x81a3: jmps 0x04
    # result = -1
	0x81a5: movb r1, #0xff

	0x81a9: mov r0, r1
	0x81ad: pop r1
	0x81af: ret
}
hex2word {
	0x81b0: push r1
	0x81b3: push r2
	0x81b6: push r3
	0x81b9: xor r2, r2
	0x81bd: xor r3, r3
	0x81c1: mov r1, r0

    # while r3 != 4
        # 0x8172(input)
        0x81c5: mov r0, r1
        0x81c9: call 0xffa5 # htoi
        0x81cd: cmpb r0, #ff
        0x81d1: jz 0x0015 # 0x81e9

        0x81d4: mulb r2, #0x10
        0x81d8: add r2, r0
        0x81dc: inc r1   # r1 ++
        0x81de: inc r3   # r3 ++
        0x81e0: cmpb r3, #0x04
        0x81e4: jnz 0xffde # 0x81c5
	0x81e7: jmps 0x04

    # result = 0
	0x81e9: movb r2, #0x00

	0x81ed: mov r0, r2

	0x81f1: pop r3
	0x81f3: pop r2
	0x81f5: pop r1
	0x81f7: ret
}
unhex {
    0x81f8: push r2
    0x81fb: push r3
    0x81fe: push r4
    0x8201: push r5

    0x8204: xor r4, r4
    0x8208: mov r3, r1 # 7f98
    0x820c: mov r2, r0
    0x8210: call 0xff9c # hex2word

    0x8214: mov r5, r0
    0x8218: divl r5, #0x100  # >> 8
    0x821d: mov [r3], r5
    0x8221: inc r3
    0x8223: mov [r3], r0
    0x8227: inc r3

    0x8229: addb r2, #04
    0x822d: mov r1, r3
    0x8231: mov r0, r2
    0x8235: inc r4
    0x8237: cmpb r4, #10
    0x823b: jnz 0xffd2

    0x823e: pop r5
    0x8240: pop r4
    0x8242: pop r3
    0x8244: pop r2
    0x8246: ret
}
unpack {
	0x8247: push r1
	0x824a: push r2

	0x824d: mov r1, [r0]   # r1 = data[i]
	0x8251: mull r1, #0100 # r1 <<= 8
	0x8256: inc r0         # i++
	0x8258: mov r2, [r0]   # r2 = data[i]
	0x825c: add r1, r2     # r1 += r2
	0x8260: mov r0, r1     # return r1

	0x8264: pop r2
	0x8266: pop r1
	0x8268: ret
}
check1 {
	0x8269: push r1
	0x826c: push r2
	0x826f: mov r7, r0 # r7 = data

	0x8273: addb r0, #00
	0x8277: call 0xffcc # unpack
	0x827b: mov r1, r0

	0x827f: mov r0, r7
	0x8283: addb r0, #14 data + 20
	0x8287: call 0xffbc # unpack
	0x828b: mov r2, r0

    # r0 = 0x7cf5
	0x828f: movl r0, #0x87ec
	0x8294: call 0xffaf # unpack

	0x8298: xorl r1, #0x4936
	0x829d: add r1, r2
	0x82a1: xor r0, r1 

    # x[0] ^ 0x4936 + x[10] == 0x7cf5
	0x82a5: pop r2
	0x82a7: pop r1
	0x82a9: ret
}
check2 {
	0x82aa: push r1
	0x82ad: psuh r2
	0x82b0: push r3
	0x82b3: mov r7, r0

    # r1 = x[1]
    0x82b7: addb r0, #2
	0x82bb: call 0xff88 # unpack
	0x82bf: mov r1, r0

    # r2 = x[3]
	0x82c3: mov r0, r7
	0x82c7: addb r0, #06
	0x82cb: call 0xff78 # unpack

    # r3 = x[4]
	0x82cf: mov r2, r0
	0x82d3: mov r0, r7
	0x82d7: addb r0, #08
	0x82db: call 0xff68
	0x82df: mov r3, r0

    # r0 = 0x3dd8
	0x82e3: movl r0, #0x87ea
	0x82e8: call 0xff5b

    # (x[1] ^ 0x0fdf) * x[3] * x [4] == 0x3dd8
	0x82ec: xorl r1, #0fdf
	0x82f1: mul r2, r3
	0x82f5: mul r1, r2
	0x82f9: xor r0, r1

	0x82fd: pop r3
	0x82ff: pop r2
	0x8301: pop r1
	0x8303: ret
}
check3 {
	0x8304: push r1
	0x8307: push r2
	0x830a: push r3
    0x830d: mov r7, r0
    # r1 = x[2]
    0x8311: addb r0, #4
	0x8315: call unpack
	0x8319: mov r1, r0

    # r2 = x[7]
	0x831d: mov r0, r7
	0x8321: addb r0, #0e
	0x8325: call 0xff1e
	0x8329: mov r2, r0

    # r3 = x[6]
	0x832d: mov r0, r7
	0x8331: addb r0, #0c
	0x8335: call 0xff0e
	0x8339: mov r3, r0

    # r0 = 0xeb70
	0x833d: movl r0, #0x87fe
	0x8342: call 0xff01

    # (x[2] ^ 0xc7df) + x[7]* x[6] == 0xeb70
	0x8346: xorl r1, #c7df
	0x834b: mul r2, r3
	0x834f: add r1, r2
	0x8353: xor r0, r1

	0x8357: pop r3
	0x8359: pop r2
	0x835b: pop r1
	0x835d: ret
}
check4 {
	0x835e: push r1

    # r1 = input[6:8]
    0x8361: mov r7, r0
	0x8365: addb r0, #06
	0x8369: call unpack
	0x836d: mov r1, r0

    # r0 = 0x500d
	0x8371: movl r0, #0x8804
	0x8376: call 0xfecd

    # x[3] ^ 0xc5db + 0x14aa == 0x500d
	0x837a: xorl r1, #c5db
	0x837f: addl r1, #14aa
	0x8384: xor r0, r1
	0x8388: pop r1
	0x838a: ret
}
check5 {
	0x838b: push r1
	0x838f: push r2
	0x8391: mov r7, r0

    # r1 = x[4]
	0x8395: addb r0, #08
	0x8399: call 0xfeaa
	0x839d: mov r1, r0

    # r2 = x[15]
	0x83a1: mov r0, r7
	0x83a5: addb r0, #1e
	0x83a9: call 0xfe9a
	0x83ad: mov r2, r0

    # r0 = 0x7be8
	0x83b1: movl r0, #0x8806
	0x83b6: call 0xfe8d

    # x[4] * x[15] == 0x7be8
	0x83ba: mul r1, r2
	0x83be: xor r0, r1

	0x83c2: pop r2
	0x83c4: pop r1
	0x83c6: ret
}
check6 {
    0x83c7: push r1
    0x83ca: push r2
    0x83cd: push r3
    0x83d0: mov r7, r0

    # r1 = x[5]
    0x83d4: addb r0, #10
    0x83d8: call unpack
    0x83dc: mov r1, r0

    # r2 = x[3]
    0x83e0: mov r0, r7
    0x83e4: addb r0, #6
    0x83e8: call unpack
    0x83ec: mov r2, r0

    # r3 = x[6]
    0x83f0: mov r0, r7
    0x83f4: addb r0, #0c
    0x83f8: call 0xfe4b
    0x83fc: mov r3, r0

    # r0 = 0xdf28
    0x8400: movl r0, #0x8802
    0x8405: call 0xfe3e

    # x[5] + x[3] + x[6] == 0xdf28
    0x8409: add r2, r3
    0x840d: add r1, r2
    0x8411: xor r0, r1

    0x8415: pop r3
    0x8417: pop r2
    0x8419: pop r1
    0x841b: ret
}
check7 {
    0x841c: push r1

    # r1 = x[6]
    0x841f: mov r7, r0
    0x8423: addb r0, #12
    0x8427: call unpack
    0x842b: mov r1, r0

    # r0 = 0x3b78
    0x842f: movl r0, #0x8812
    0x8434: call 0xfe0f

    # (x[6] + 0x5432) | 0x3008 == 0x3b78
    0x8438: addl r1, #5432
    0x843d: orl r1, #3008
    0x8442: xor r0, r1

    0x8446: pop r1
    0x8448: ret
}
check8 {
    0x8449: push r1

    # r1 = x[7]
    0x844d: mov r7, r0
    0x844e: addb r0, #14
    0x8454: call unpack
    0x8458: mov r1, r0

    # r0 = 0x1697
    0x845c: movl r0, #0x8818
    0x8461: call 0xfde2
    
    # x[7] + 0x1212 == 0x1697
    0x8465: addl r1, #1212
    0x846a: xor r0, r1
    0x846e: pop r1
    0x8470: ret
}
check9 {
    # r1 = x[8]
    0x8471: push r1
    0x8474: mov r7, r0
    0x8478: addb r0, #16
    0x847c: call unpack
    0x8480: mov r1, r0
    # r0 = 0x3136
    0x8484: movl r0, #0x87fa
    0x8489: call 0xfdba
    # x[8] ^ 0x8703 == 0x3136
    0x848d: xorl r1, #8703
    0x8492: xor r0, r1

    0x8496: pop r1
    0x8498: ret
}
check10 {
    0x8499: push r1
    0x849c: push r2
    # r1 = x[9]
    0x849f: mov r7, r0
    0x84a3: addb r0, #12
    0x84a7: call 0xfd9c
    0x84ab: mov r1, r0
    0x84af: mov r0, r7
    # r2 = x[10]
    0x84b3: addb r0, #14
    0x84b7: call 0xfd8c
    0x84bb: mov r2, r0

    # r0 = 0x6272
    0x84bf: movl r0, #0x8814
    0x84c4: call 0xfd7f

    # (x[10] ^ 0x0a52) + x[9] + 0x4004 == 0x6272
    0x84c8: xorl r2, #0a52
    0x84cd: addl r1, #4004
    0x84d2: add r1, r2

    0x84d6: xor r0, r1
    0x84da: pop r2
    0x84dc: pop r1
    0x84de: ret
}
check11 {
    0x84df: push r1

    # r1 = x[10]
    0x84e2: mov r7, r0
    0x84e6: addb r0, #0x14
    0x84ea: call 0xfd59
    0x84ee: mov r1, r0

    # r0 = 0x0a52
    0x84f2: movl r0, #0x87e8
    0x84f7: call 0xfd4c

    # x[10] == 0x0a52
    0x84fb: xor r0, r0
    0x84ff: pop r1
    0x8501: ret
}
check12 {
    0x8502: push r1
    0x8506: pop r2
    # r1 = x[11]
    0x8508: mov r7, r0
    0x850c: addb r0, #16
    0x8510: call 0xfd33
    0x8514: mov r1, r0
    # r2 = x[8]
    0x8518: mov r0, r7
    0x851c: addb r0, #10
    0x8520: call 0xfd23
    0x8524: mov r2, r0
    # r0 = 0x9308
    0x8528: movl r0, #0x87fc
    0x852d: call 0xfd16
    # x[11] + x[8] == 0x9308
    0x8531: add r1, r2
    0x8535: xor r0, r1
    0x8539: pop r2
    0x853b: pop r1
    0x853d: ret
}
check13 {
    0x853e: push r1
    # r1 = x[12]
    0x8541: mov r7, r0
    0x8545: addb r0, #0x18
    0x8549: call unpack
    0x854d: mov r1, r0
    # r0 = 0x085b
    0x8551: movl r0, #0x881e
    0x8556: call 0xfced

    0x855a: xor r0, r1
    0x855e: pop r1
    0x8560: ret
}
check14 {
    # r1 = x[13]
    0x8561: push r1
    0x8565: .byte 0x00
    0x8566: sub r6, r1
    0x856a: .byte 0x00
    0x856b: ret
    0x856c: call 0xfcd7
    0x8570: mov r1, r0

    # r0 = 0x9113
    0x8574: movl r0, #0x87e2
    0x8579: call 0xfcca

    # (x[13] ^ 0x863c) + 0x1234 == 0x9113
    0x857d: xorl r1, #863c
    0x8582: addl r1, #1234
    0x8587: xor r0, r1
    0x858b: pop r1
    0x858d: ret
}

check15{
    0x858e: push r1
    0x8592: pop r2
    0x8594: push r3
    # r1 = x[14]
    0x8598: .byte 0x00
    0x8599: sub r6, r1
    0x859d: .byte 0x00
    0x859e: end
    0x859f: call 0xfca4
    0x85a3: mov r1, r0

    # r2 = x[4]
    0x85a7: mov r0, r7
    0x85ab: addb r0, #08
    0x85af: call 0xfc94
    0x85b3: mov r2, r0

    # r3 = x[9]
    0x85b7: mov r0, r7
    0x85bb: addb r0, #12
    0x85bf: call 0xfc84
    0x85c3: mov r3, r0

    # r0 = 0xf0b8
    0x85c7: movl r0, #0x8810
    0x85cc: call 0xfc77

    #x[14] + x[4] + x[9] == 0xf0b8
    0x85d0: add r2, r3
    0x85d4: add r1, r2
    0x85d8: xor r0, r1

    0x85dc: pop r3
    0x85de: pop r2
    0x85e0: pop r1
    0x85e2: ret
}
check16{
    0x85e3: push r1
    0x85e7: pop r2

    # r1 = x[15]
    0x85e9: mov r7, r0
    0x85ed: addb r0, #1e
    0x85f1: call 0xfc52
    0x85f5: mov r1, r0
    # r2 = x[0]
    0x85f9: mov r0, r7
    0x85fd: addb r0, #00
    0x8601: call 0xfc42
    0x8605: mov r2, r0

    # r0 = 0x9f94
    0x8609: movl r0, #0x8820
    0x860e: call 0xfc35

    # (x[15] & 0x0f00) + x[0] == 0x9f94
    0x8612: andl r1, #0f00
    0x8617: add r1, r2

    0x861b: xor r0, r1
    0x861f: pop r2
    0x8621: pop r1
    0x8623: ret
}
check {
    # data = unhex(input)
    0x8624: subb r8, #20
    0x8628: mov r2, r8
    0x862c: mov r1, r8
    0x8630: call 0xfbc4 (0x81f8) # unhex

    # check1(data)
    0x8634: mov r0, r2
    0x8638: call 0xfc2d (0x8269)
    0x863c: test r0, r0
    0x863f: jnz 0x00d8 (0x871a)

    # check2(data)
    0x8642: mov r0, r2
    0x8646: call 0xfc60 (0x82aa)
    0x864a: test r0, r0
    0x864d: jnz 0x00ca (0x871a)

    # check3(data)
    0x8650: mov r0, r2
    0x8654: call 0xfcac (0x8304)
    0x8658: test r0, r0
    0x865b: jnz 0x00bc (0x871a)

    # check4(data)
    0x865e: mov r0, r2
    0x8662: call 0xfcf8 (0x835e)
    0x8666: test r0, r0
    0x8669: jnz 0x00ae (0x871a)

    # check5(data)
    0x866c: mov r0, r2
    0x8670: call 0xfd17 (0x838b)
    0x8674: test r0, r0
    0x8677: jnz 0x00a0 (0x871a)

    # check6(data)
    0x867a: mov r0, r2
    0x867e: call 0xfd45 (0x83c7)
    0x8682: test r0, r0
    0x8685: jnz 0x0092 (0x871a)
    
    # check7(data)
    0x8688: mov r0, r2
    0x868c: call 0xfd8c (0x841c)
    0x8690: test r0, r0
    0x8693: jnz 0x0084 (0x871a)

    # check8(data)
    0x8696: mov r0, r2
    0x869a: call 0xfdab (0x8449)
    0x869e: test r0, r0
    0x86a1: jnz 0x0076 (0x871a)

    # check9(data)
    0x86a4: mov r0, r2
    0x86a8: call 0xfdc5 (0x8471)
    0x86ac: test r0, r0
    0x86af: jnz 0x0068 (0x871a)

    # check10(data)
    0x86b2: mov r0, r2
    0x86b6: call 0xfddf (0x8499)
    0x86ba: test r0, r0
    0x86bd: jnz 0x005a (0x871a)

    # check11(data)
    0x86c0: mov r0, r2
    0x86c4: call 0xfe17 (0x84df)
    0x86c8: test r0, r0
    0x86cb: jnz 0x004c (0x871a)

    # check12(data)
    0x86ce: mov r0, r2
    0x86d2: call 0xfe2c (0x8502)
    0x86d6: test r0, r0
    0x86d9: jnz 0x003e (0x871a)

    # check13(data)
    0x86dc: mov r0, r2
    0x86e0: call 0xfe5a (0x853e)
    0x86e4: test r0, r0
    0x86e7: jnz 0x0030 (0x871a)

    # check14(data)
    0x86ea: mov r0, r2
    0x86ee: call 0xfe6f (0x8561)
    0x86f2: test r0, r0
    0x86f5: jnz 0x0022 (0x871a)

    # check15(data)
    0x86f8: mov r0, r2
    0x86fc: call 0xfe8e (0x858e)
    0x8700: test r0, r0
    0x8703: jnz 0x0014 (0x871a)

    # check16(data)
    0x8706: mov r0, r2
    0x870a: call 0xfed5 (0x85e3)
    0x870e: test r0, r0
    0x8711: jnz 0x0006 (0x871a)

    0x8714: call 0xf9c5 (0x80dd) # success
    0x8718: jmps 0x04 (0x871e)

    0x871a: call 0xf9b5 (0x80d3) # fail
    0x871e: addb r8, #20
    0x8722: ret
}
main {
    # print("Enter your ...")
    0x8723: movl r0, #0x8759
    0x8728: call 0xf967 # print

    # read(r8, 64, r8)
    0x872c: subb r8, #0x40
    0x8730: mov r2, r8
    0x8734: movb r1, #0x40
    0x8738: mov r0, r8
    0x873c: call 0xf977 # read

    # check(sp)
    0x8740: mov r0, r2  # sp
    0x8744: call 0xfedc # check

    0x8748: addb r8, #40
    0x874c: end
}
newline {
    # print("\n")
    0x874d: movl r0, #0x8757
    0x8752: call 0xf93d # 0x8093
    0x8756: ret
}
0x8757: .db 0x0a, 0x00
0x8759: .db "Enter your registeration code: ", 0x00
0x8778: .db "Code does not match any known registered users", 0x0a, 0x00
0x87a8: .db "Thank you for your patronage!", 0x0a, "Your username is: ", 0x00
0x87d9: .db "flag", 0x00
0x87de: .byte 0x3c (<)
0x87df: .byte 0xe3
0x87e0: .byte 0x5a (Z)
0x87e1: .byte 0x9e
0x87e2: .byte 0x91
0x87e3: .byte 0x13
0x87e4: .byte 0x8c
0x87e5: .byte 0x05
0x87e6: .byte 0xe4
0x87e7: .byte 0x2e (.)
0x87e8: .byte 0x0a
0x87e9: .byte 0x52
0x87ea: .byte 0x3d (=)
0x87eb: .byte 0xd8
0x87ec: .byte 0x7c
0x87ed: .byte 0xf5
0x87ee: .byte 0x9f
0x87ef: .byte 0x4b (K)
0x87f0: .byte 0x9f
0x87f1: .byte 0x06
0x87f2: .byte 0xd7
0x87f3: .byte 0xa8
0x87f4: .byte 0xe9
0x87f5: .byte 0xa0
0x87f6: .byte 0xa6
0x87f7: .byte 0x36 (6)
0x87f8: .byte 0xa6
0x87f9: .byte 0x49 (I)
0x87fa: .byte 0x31 (1)
0x87fb: .byte 0x36 (6)
0x87fc: .byte 0x93
0x87fd: .byte 0x08
0x87fe: .byte 0xeb
0x87ff: .byte 0x70
0x8800: .byte 0xeb
0x8801: .byte 0xbf
0x8802: .byte 0xdf
0x8803: .byte 0x28 (()
0x8804: .byte 0x50 (P)
0x8805: .byte 0x0d
0x8806: .byte 0x7b 
0x8807: .byte 0xe8 
0x8808: .byte 0x96
0x8809: .byte 0xfa
0x880a: .byte 0xe8
0x880b: .byte 0xb7
0x880c: .byte 0xa5
0x880d: .byte 0xdf
0x880e: .byte 0xc2
0x880f: .byte 0x4d (M)
0x8810: .byte 0xf0
0x8811: .byte 0xb8
0x8812: .byte 0x3b (#)
0x8813: .byte 0x78 (x)
0x8814: .byte 0x62 (b)
0x8815: .byte 0x72 (r)
0x8816: .byte 0xb7
0x8817: .byte 0x48 (H)
0x8818: .byte 0x16
0x8819: .byte 0x97
0x881a: .byte 0xf0
0x881b: .byte 0x19
0x881c: .byte 0x2d
0x881d: .byte 0x6b
0x881e: .byte 0x08
0x881f: .byte 0x5b ([)
0x8820: .byte 0x9f
0x8821: .byte 0x94
0x8822: .byte 0x49 (I)
0x8823: .byte 0x87
0x8824: .byte 0xe6
0x8825: .byte 0x24 ($)
0x8826: .byte 0x37 (7)
0x8827: .byte 0x52 (R)
0x8828: .byte 0xef
0x8829: .byte 0xb8
